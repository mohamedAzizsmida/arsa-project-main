{# templates/admin/tables.html.twig #}
{% extends 'ArsBack/base.html.twig' %}

{% block title %}Admin Tables{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <style>
     /* Sidebar styles */
        .sidebar-nav-wrapper {
            width: 250px;
            position: fixed;
            left: 0;
            top: 0;
            height: 100%;
            background: #fff;
            box-shadow: 0 0 15px rgba(0,0,0,0.05);
            transition: all 0.3s ease-in-out;
            z-index: 999;
            overflow-y: auto;
        }
        .container-fluid {
            padding-left: 20px;
            padding-right: 20px;
        }
            


        .sidebar-nav-wrapper.collapsed {
            transform: translateX(-100%);
        }

        .main-wrapper {
            margin-left: 250px; /* Changed from padding-left to margin-left */
            min-height: 100vh;
            transition: all 0.3s ease-in-out;
            background-color: #f1f5f9;
            width: calc(100% - 250px); /* Add this to control width */
        }

        .main-wrapper.active {
            margin-left: 0; /* Changed from padding-left to margin-left */
            width: 100%; /* Add this to take full width when sidebar is collapsed */
        }

        /* Overlay styles */
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.3);
            display: none;
            z-index: 998;
            transition: all 0.3s ease-in-out;
        }

        .overlay.active {
            display: block;
        }

        /* Header styles */
        .header {
            width: 100%;
            position: sticky;
            top: 0;
            background-color: #fff;
            padding: 20px;  /* Changed padding */
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            z-index: 997;
        }

        /* Search box styles */
        .search-box {
            position: relative;
            width: 300px;
        }

        .search-box input {
            width: 100%;
            height: 46px;
            padding: 0 20px;
            padding-right: 50px;
            border-radius: 4px;
            border: 1px solid #e2e8f0;
            transition: all 0.3s ease;
        }

        .search-box input:focus {
            border-color: #4a6cf7;
            box-shadow: 0 0 0 3px rgba(74, 108, 247, 0.1);
            outline: none;
        }

        .search-box i {
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            color: #64748b;
            pointer-events: none;
        }

        /* Button styles */
        .main-btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 12px 24px;
            border-radius: 4px;
            font-weight: 500;
            font-size: 15px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease-out;
        }

        .primary-btn {
            background: #4a6cf7;
            color: #fff;
        }

        .primary-btn:hover {
            background: #3d5ef3;
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(74, 108, 247, 0.1);
        }

        /* Utility classes */
        .mr-5 {
            margin-right: 5px;
        }

        /* Pagination styles */
        .pagination-wrapper {
            margin-top: 2rem;
        }
        
        .pagination .page-link {
            color: #4a6cf7;
            background-color: #fff;
            border: 1px solid #e2e8f0;
            padding: 0.5rem 0.75rem;
            margin: 0 2px;
            min-width: 38px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .pagination .page-item.active .page-link {
            background-color: #4a6cf7;
            border-color: #4a6cf7;
            color: #fff;
        }

        .pagination .page-item.disabled .page-link {
            color: #6c757d;
            pointer-events: none;
            background-color: #fff;
        }

        .pagination .page-link:hover {
            background-color: #4a6cf7;
            color: #fff;
            border-color: #4a6cf7;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(74, 108, 247, 0.1);
        }

        /* Table wrapper styles */
        .tables-wrapper {
            background: #fff;
            border-radius: 4px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        }

        /* Responsive adjustments */
            @media (max-width: 991px) {
    .sidebar-nav-wrapper {
        transform: translateX(-100%);
    }
    
    .main-wrapper {
        margin-left: 0;
        width: 100%;
    }
    
    .sidebar-nav-wrapper.collapsed {
        transform: translateX(0);
    }
}

        @media (max-width: 768px) {
            .search-box {
                width: 100%;
                max-width: 300px;
            }
        }
        
        
    </style>
    {% endblock %}

{% block body %}
    <body>
        <!-- ======== Preloader =========== -->
        <div id="preloader">
        <div class="spinner"></div>
        </div>
        <!-- ======== Preloader =========== -->

        <!-- ======== sidebar-nav start =========== -->
        <aside class="sidebar-nav-wrapper">
        <div class="navbar-logo">
            <img src="{{ asset('img/ecodon.png') }}" alt="logo"style="width: 120px; height: auto; max-height: 60px; object-fit: contain;" />
            </a>
        </div>
        <nav class="sidebar-nav">
            <ul>
            
            <span class="divider"><hr /></span>
            
            <li class="nav-item active">
				<li class="nav-item">
					<a href="{{ path('app_user_index') }}" class="nav-link">Gestion des Compte</a>
				</li>
				<li class="nav-item">
					<a href="{{ path('admin_tables') }}" class="nav-link">Evenenements</a>
				</li>            </li>
            
            </ul>
        </nav>
        
        </aside>
        <div class="overlay"></div>
        <!-- ======== sidebar-nav end =========== -->

        <!-- ======== main-wrapper start =========== -->
        <main class="main-wrapper">
            <!-- ========== header start ========== -->
        <header class="header">
            <div class="container-fluid">
            <div class="row">
                <div class="col-lg-5 col-md-5 col-6">
                <div class="header-left d-flex align-items-center">
                    <div class="menu-toggle-btn mr-15">
                    
                    </div>
                    
                </div>
                </div>
                <div class="col-lg-7 col-md-7 col-6">
                <div class="header-right">
                
                    <!-- profile start -->
                    <div class="profile-box ml-15">
                        <button class="dropdown-toggle bg-transparent border-0" type="button" id="profile"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            <div class="profile-info">
                                <div class="info">
                                    <div class="image">
                                        <img src="{{ asset('admin_assets/images/profile/profile-image.png') }}" alt="" />
                                    </div>
                                    <div>
                                        <h6 class="fw-500">Adam Joe</h6>
                                        <p>Admin</p>
                                    </div>
                                </div>
                            </div>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profile">
                            <li>
                                <div class="author-info flex items-center !p-1">
                                    <div class="image">
                                        <img src="{{ asset('admin_assets/images/profile/profile-image.png') }}" alt="image">
                                    </div>
                                    <div class="content">
                                        <h4 class="text-sm">Adam Joe</h4>
                                        <a class="text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white text-xs" href="#">Email@gmail.com</a>
                                    </div>
                                </div>
                            </li>
                            <li class="divider"></li>
                            
                            <li>
                                <a href="{{ path('app_eventspage') }}"> <i class="lni lni-exit"></i> Sign Out </a>
                            </li>
                        </ul>
                    </div>
                    <!-- profile end -->
                </div>
                </div>
            </div>
            </div>
        </header>
        <!-- ========== header end ========== -->
        

        <!-- ========== table components start ========== -->
        <section class="table-components">
            <div class="container-fluid">
            <!-- ========== title-wrapper start ========== -->
            <div class="title-wrapper pt-30">
                <div class="row align-items-center">
                <div class="col-md-6">
                    <div class="title">
                    <h2>Tables</h2>
                    </div>
                </div>
                <!-- end col -->
                <!-- end col -->
                </div>
                <!-- end row -->
            </div>
            <!-- ========== title-wrapper end ========== -->

            <!-- ========== table events start ========== -->
            <div class="tables-wrapper ">
                    <div class="row">
                    <div class="col-lg-12">
                        <div class="card-style mb-30">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <!-- Search Bar -->
                            <div class="search-box">
                                <input type="text" class="form-control" id="searchInput" placeholder="Search by event name, association, or date...">
                                <i class="lni lni-search-alt"></i>
                            </div>
                            <!-- Add Event Button -->
                            <button class="main-btn primary-btn btn-hover" data-bs-toggle="modal" data-bs-target="#addEventModal">
                                <i class="lni lni-plus mr-5"></i> Add Event
                            </button>
                        </div>

                            <h6 class="mb-10">Events Table</h6>
                        
                        <!-- begin table content -->
                        
                            <div class="table-wrapper table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th><h6>Image</h6></th>
                                            <th><h6>Name</h6></th>
                                            <th><h6>Association</h6></th>
                                            <th><h6>Date</h6></th>
                                            <th><h6>Price</h6></th>
                                            <th><h6>Location</h6></th>
                                            <th><h6>Type</h6></th>
                                            <th><h6>Actions</h6></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for event in events %}
                                        <tr>
                                            <td class="min-width">
                                                <div class="event-image">
                                                    <img src="{{ asset('uploads/events/' ~ event.imageFilename) }}" 
                                                        alt="{{ event.name }}" 
                                                        style="width: 50px; height: 50px; object-fit: cover;" />
                                                </div>
                                            </td>
                                            <td class="min-width"><p>{{ event.name }}</p></td>
                                            <td class="min-width"><p>{{ event.association.name }}</p></td>
                                            <td class="min-width"><p>{{ event.eventDate|date('Y-m-d') }}</p></td>
                                            <td class="min-width"><p>${{ event.price }}</p></td>
                                            <td class="min-width"><p>{{ event.location.name }}</p></td>
                                            <td class="min-width">
                                                <span class="status-btn {{ event.type == 'water' ? 'info-btn' : 
                                                                        event.type == 'education' ? 'warning-btn' :
                                                                        event.type == 'blood' ? 'danger-btn' :
                                                                        event.type == 'homes' ? 'success-btn' :
                                                                        event.type == 'ramadan' ? 'purple-btn' : 'primary-btn' }}">
                                                    {{ event.type|capitalize }}
                                                </span>
                                            </td>
                                            <td>
                                                <div class="action">
                                                    <button class="text-primary me-2" onclick="editEvent({{ event.id }})">
                                                        <i class="lni lni-pencil"></i>
                                                    </button>
                                                    <button class="text-danger" onclick="deleteEvent({{ event.id }})">
                                                        <i class="lni lni-trash-can"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>
                                    
                                <div class="pagination-wrapper mt-4">
                                    <nav aria-label="Page navigation">
                                        <ul class="pagination justify-content-center">
                                            {% if startPage > 1 %}
                                                <li class="page-item">
                                                    <a class="page-link" href="{{ path('admin_tables', {'page': 1}) }}">1</a>
                                                </li>
                                                {% if startPage > 2 %}
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                {% endif %}
                                            {% endif %}

                                            {% for i in startPage..endPage %}
                                                <li class="page-item {{ currentPage == i ? 'active' : '' }}">
                                                    <a class="page-link" href="{{ path('admin_tables', {'page': i}) }}">{{ i }}</a>
                                                </li>
                                            {% endfor %}

                                            {% if endPage < totalPages %}
                                                {% if endPage < totalPages - 1 %}
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                {% endif %}
                                                <li class="page-item">
                                                    <a class="page-link" href="{{ path('admin_tables', {'page': totalPages}) }}">{{ totalPages }}</a>
                                                </li>
                                            {% endif %}
                                        </ul>
                                    </nav>
                                </div>
                            </div>                   
                </div>

                <!-- association Table -->
                <div class="tables-wrapper mt-5">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="card-style mb-30">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <div class="search-box">
                                    <input type="text" class="form-control" id="searchAssociationInput" placeholder="Search by association name...">
                                    <i class="lni lni-search-alt"></i>
                                </div>
                                <button class="main-btn primary-btn btn-hover" data-bs-toggle="modal" data-bs-target="#addAssociationModal">
                                    <i class="lni lni-plus mr-5"></i> Add Association
                                </button>
                            </div>
                            
                            <h6 class="mb-10">Associations Table</h6>
                            
                            <div class="table-wrapper table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th><h6>Logo</h6></th>
                                            <th><h6>Name</h6></th>
                                            <th><h6>Description</h6></th>
                                            <th><h6>Actions</h6></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for association in associations %}
                                        <tr>
                                            <td class="min-width">
                                                <div class="association-image">
                                                    {% if association.logo %}
                                                        <img src="{{ asset('uploads/associations/' ~ association.logo) }}" 
                                                            alt="{{ association.name }}" 
                                                            style="width: 50px; height: 50px; object-fit: cover;" />
                                                    {% else %}
                                                        <div class="no-image" style="width: 50px; height: 50px; background: #eee; display: flex; align-items: center; justify-content: center;">
                                                            <i class="lni lni-image"></i>
                                                        </div>
                                                    {% endif %}
                                                </div>
                                            </td>
                                            <td class="min-width">
                                                <p>{{ association.name }}</p>
                                            </td>
                                            <td class="min-width">
                                                <p>{{ association.description }}</p>
                                            </td>
                                            <td>
                                                <div class="action">
                                                    <button class="text-primary me-2" onclick="editAssociation({{ association.id }})">
                                                        <i class="lni lni-pencil"></i>
                                                    </button>
                                                    <button class="text-danger" onclick="deleteAssociation({{ association.id }})">
                                                        <i class="lni lni-trash-can"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Locations Table -->
            <div class="tables-wrapper mt-5">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="card-style mb-30">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <div class="search-box">
                                    <input type="text" class="form-control" id="searchLocationInput" placeholder="Search by location name or country...">
                                    <i class="lni lni-search-alt"></i>
                                </div>
                                <button class="main-btn primary-btn btn-hover" data-bs-toggle="modal" data-bs-target="#addLocationModal">
                                    <i class="lni lni-plus mr-5"></i> Add Location
                                </button>
                            </div>
                            
                            <h6 class="mb-10">Locations Table</h6>
                            
                            <div class="table-wrapper table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th><h6>Name</h6></th>
                                            <th><h6>Country</h6></th>
                                            <th><h6>Coordinates</h6></th>
                                            <th><h6>Donation Amount</h6></th>
                                            <th><h6>Actions</h6></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for location in locations %}
                                        <tr>
                                            <td class="min-width">
                                                <p>{{ location.name }}</p>
                                            </td>
                                            <td class="min-width">
                                                <p>{{ location.country }}</p>
                                            </td>
                                            <td class="min-width">
                                                <p>{{ location.latitude }}, {{ location.longitude }}</p>
                                            </td>
                                            <td class="min-width">
                                                <p>${{ location.donationAmount }}</p>
                                            </td>
                                            <td>
                                                <div class="action">
                                                    <button class="text-primary me-2" onclick="editLocation({{ location.id }})">
                                                        <i class="lni lni-pencil"></i>
                                                    </button>
                                                    <button class="text-danger" onclick="deleteLocation({{ location.id }})">
                                                        <i class="lni lni-trash-can"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
                
        
            </section>
        <!-- ========== table components end ========== -->
        <!-- ========== modals components end ========== -->

        {#  Event Modal #}
            <div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addEventModalLabel">Add New Event</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="addEventForm">
                                <div class="mb-3">
                                    <label for="eventName" class="form-label">Event Name</label>
                                    <input type="text" class="form-control" id="eventName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="associationId" class="form-label">Association</label>
                                    <select class="form-control" id="associationId" required>
                                        <option value="">Select Association</option>
                                        {% for association in associations %}
                                            <option value="{{ association.id }}">{{ association.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="eventDate" class="form-label">Date</label>
                                    <input type="date" 
                                        class="form-control" 
                                        id="eventDate" 
                                        required 
                                        min="{{ "now"|date('Y-m-d') }}"
                                        title="Please select a future date">
                                </div>
                                <div class="mb-3">
                                    <label for="eventPrice" class="form-label">Price</label>
                                    <input type="number" step="0.01" class="form-control" id="eventPrice" required>
                                </div>
                                <div class="mb-3">
                                    <label for="eventLocation" class="form-label">Location</label>
                                    <select class="form-control" id="eventLocation" required>
                                        <option value="">Select Location</option>
                                        {% for location in locations %}
                                            <option value="{{ location.id }}">{{ location.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="eventType" class="form-label">Type</label>
                                    <select class="form-control" id="eventType" required>
                                        <option value="">Select Type</option>
                                        <option value="water">Water</option>
                                        <option value="education">Education</option>
                                        <option value="blood">Blood</option>
                                        <option value="homes">Homes</option>
                                        <option value="ramadan">Ramadan</option>
                                        <option value="hospital">Hospital</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="eventImage" class="form-label">Image</label>
                                    <input type="file" class="form-control" id="eventImage" accept="image/*" required>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" id="saveEventBtn">Save Event</button>
                        </div>
                    </div>
                </div>
            </div>

            {#  Association Modal #}
            <div class="modal fade" id="addAssociationModal" tabindex="-1" aria-labelledby="addAssociationModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addAssociationModalLabel">Add New Association</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="addAssociationForm">
                                <div class="mb-3">
                                    <label for="associationName" class="form-label">Name</label>
                                    <input type="text" class="form-control" id="associationName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="associationDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="associationDescription" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="associationLogo" class="form-label">Logo</label>
                                    <input type="file" class="form-control" id="associationLogo" accept="image/*" required>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" id="saveAssociationBtn">Save Association</button>
                        </div>
                    </div>
                </div>
            </div>

            {#  Location Modal #}
            <div class="modal fade" id="addLocationModal" tabindex="-1" aria-labelledby="addLocationModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addLocationModalLabel">Add New Location</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="addLocationForm">
                                <div class="mb-3">
                                    <label for="locationName" class="form-label">Name</label>
                                    <input type="text" class="form-control" id="locationName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="locationCountry" class="form-label">Country</label>
                                    <input type="text" class="form-control" id="locationCountry" required>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="locationLatitude" class="form-label">Latitude</label>
                                        <input type="number" step="any" class="form-control" id="locationLatitude" required>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="locationLongitude" class="form-label">Longitude</label>
                                        <input type="number" step="any" class="form-control" id="locationLongitude" required>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="locationDonationAmount" class="form-label">Donation Amount</label>
                                    <input type="number" step="0.01" class="form-control" id="locationDonationAmount" required>
                                </div>
                                <div class="mb-3">
                                    <label for="locationYoutubeUrl" class="form-label">YouTube Embed URL</label>
                                    <input type="url" class="form-control" id="locationYoutubeUrl">
                                    <small class="form-text text-muted">Optional: Add a YouTube video URL for this location</small>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" id="saveLocationBtn">Save Location</button>
                        </div>
                    </div>
                </div>
            </div>



            <!-- ========== modals components end ========== -->
        
        </main>
        
    </body>
    
        <!-- ========= All Javascript files linkup ======== -->
        <script src="{{ asset('admin_assets/js/bootstrap.bundle.min.js') }}"></script>
        <script src="{{ asset('admin_assets/js/Chart.min.js') }}"></script>
        <script src="{{ asset('admin_assets/js/dynamic-pie-chart.js') }}"></script>
        <script src="{{ asset('admin_assets/js/moment.min.js') }}"></script>
        <script src="{{ asset('admin_assets/js/fullcalendar.js') }}"></script>
        <script src="{{ asset('admin_assets/js/jvectormap.min.js') }}"></script>
        <script src="{{ asset('admin_assets/js/world-merc.js') }}"></script>
        <script src="{{ asset('admin_assets/js/polyfill.js') }}"></script>
        <script src="{{ asset('admin_assets/js/main.js') }}"></script>
        

        <script>
        

        document.addEventListener('DOMContentLoaded', function() {
            // Event handling
            const addEventForm = document.getElementById('addEventForm');
            const saveEventBtn = document.getElementById('saveEventBtn');

            if (saveEventBtn && addEventForm) {
                saveEventBtn.addEventListener('click', function() {
                    if (addEventForm.checkValidity()) {
                        const formData = new FormData();
                        const eventId = document.getElementById('eventId')?.value;
                        
                        formData.append('name', document.getElementById('eventName').value);
                        formData.append('associationId', document.getElementById('associationId').value);
                        formData.append('date', document.getElementById('eventDate').value);
                        formData.append('price', document.getElementById('eventPrice').value);
                        formData.append('location', document.getElementById('eventLocation').value);
                        formData.append('type', document.getElementById('eventType').value);
                        
                        const imageFile = document.getElementById('eventImage').files[0];
                        if (imageFile) {
                            formData.append('image', imageFile);
                        }

                        const url = eventId 
                            ? `/admin/event/${eventId}/update`
                            : '{{ path('admin_event_create') }}';

                        fetch(url, {
                            method: 'POST',
                            body: formData
                        })
                        .then(async response => {
                            const contentType = response.headers.get("content-type");
                            if (contentType && contentType.indexOf("application/json") !== -1) {
                                return response.json().then(data => {
                                    if (!response.ok) {
                                        throw new Error(data.error || 'Server error occurred');
                                    }
                                    return data;
                                });
                            } else {
                                throw new Error("Oops, we haven't got JSON!");
                            }
                        })
                        .then(data => {
                            if (data.success) {
                                alert(eventId ? 'Event updated successfully!' : 'Event created successfully!');
                                const modal = bootstrap.Modal.getInstance(document.getElementById('addEventModal'));
                                if (modal) {
                                    modal.hide();
                                }
                                addEventForm.reset();
                                window.location.reload();
                            }
                        })
                        .catch(error => {
                            console.error('Error details:', error);
                            alert('Error: ' + error.message);
                        });
                    } else {
                        addEventForm.reportValidity();
                    }
                });
            }

            

            // Location handling
            const saveLocationBtn = document.getElementById('saveLocationBtn');
            if (saveLocationBtn) {
                saveLocationBtn.addEventListener('click', function() {
                    const form = document.getElementById('addLocationForm');
                    if (form.checkValidity()) {
                        const formData = new FormData();
                        const locationId = document.getElementById('locationId')?.value;
                        
                        formData.append('name', document.getElementById('locationName').value);
                        formData.append('country', document.getElementById('locationCountry').value);
                        formData.append('latitude', document.getElementById('locationLatitude').value);
                        formData.append('longitude', document.getElementById('locationLongitude').value);
                        formData.append('donationAmount', document.getElementById('locationDonationAmount').value);
                        formData.append('youtubeUrl', document.getElementById('locationYoutubeUrl').value);

                        const url = locationId 
                            ? `/admin/location/${locationId}/update`
                            : '{{ path('admin_location_create') }}';

                        fetch(url, {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert(locationId ? 'Location updated successfully!' : 'Location created successfully!');
                                const modal = bootstrap.Modal.getInstance(document.getElementById('addLocationModal'));
                                if (modal) {
                                    modal.hide();
                                }
                                form.reset();
                                window.location.reload();
                            } else {
                                alert('Error: ' + data.error);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error saving location');
                        });
                    }
                });
            }
            // Association handling
                const saveAssociationBtn = document.getElementById('saveAssociationBtn');
                if (saveAssociationBtn) {
                    saveAssociationBtn.addEventListener('click', function() {
                        const form = document.getElementById('addAssociationForm');
                        if (form.checkValidity()) {
                            const formData = new FormData();
                            const associationId = document.getElementById('associationId')?.value;
                            
                            formData.append('name', document.getElementById('associationName').value);
                            formData.append('description', document.getElementById('associationDescription').value);
                            
                            const logoFile = document.getElementById('associationLogo').files[0];
                            if (logoFile) {
                                formData.append('logo', logoFile);
                            }

                            const url = associationId 
                                ? `/admin/association/${associationId}/update`
                                : '{{ path('admin_association_create') }}';

                            fetch(url, {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    alert(associationId ? 'Association updated successfully!' : 'Association created successfully!');
                                    const modal = bootstrap.Modal.getInstance(document.getElementById('addAssociationModal'));
                                    if (modal) {
                                        modal.hide();
                                    }
                                    form.reset();
                                    window.location.reload();
                                } else {
                                    alert('Error: ' + data.error);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('Error saving association');
                            });
                        } else {
                            form.reportValidity();
                        }
                    });
                }
        });

            // Edit and delete functions for events and locations and associations
            function editEvent(eventId) {
                fetch(`/admin/event/${eventId}`, {
                    method: 'GET'
                })
                .then(response => response.json())
                .then(event => {
                    const form = document.getElementById('addEventForm');
                    if (form) {
                        document.getElementById('eventName').value = event.name;
                        document.getElementById('associationId').value = event.associationId;
                        document.getElementById('eventDate').value = event.eventDate.substr(0, 10);
                        document.getElementById('eventPrice').value = event.price;
                        document.getElementById('eventLocation').value = event.location.id;
                        document.getElementById('eventType').value = event.type;
                        
                        const imageInput = document.getElementById('eventImage');
                        imageInput.removeAttribute('required');
                        
                        const currentImageContainer = document.getElementById('currentImageContainer');
                        if (!currentImageContainer) {
                            const container = document.createElement('div');
                            container.id = 'currentImageContainer';
                            container.className = 'mb-3';
                            container.innerHTML = `
                                <label class="form-label">Current Image</label>
                                <div>
                                    <img src="{{ asset('uploads/events/') }}/${event.imageFilename}" 
                                        alt="Current event image" 
                                        style="max-width: 200px; max-height: 200px; object-fit: cover;">
                                </div>
                            `;
                            imageInput.parentNode.insertBefore(container, imageInput);
                        } else {
                            currentImageContainer.querySelector('img').src = `/uploads/events/${event.imageFilename}`;
                        }
                        
                        let hiddenInput = document.getElementById('eventId');
                        if (!hiddenInput) {
                            hiddenInput = document.createElement('input');
                            hiddenInput.type = 'hidden';
                            hiddenInput.id = 'eventId';
                            form.appendChild(hiddenInput);
                        }
                        hiddenInput.value = event.id;
                        
                        document.getElementById('addEventModalLabel').textContent = 'Edit Event';
                        
                        const modal = new bootstrap.Modal(document.getElementById('addEventModal'));
                        modal.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading event details');
                });
            }

            function deleteEvent(eventId) {
                if (confirm('Are you sure you want to delete this event?')) {
                    fetch(`/admin/event/${eventId}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Event deleted successfully!');
                            window.location.reload();
                        } else {
                            alert('Error: ' + (data.error || 'Unknown error occurred'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error deleting event');
                    });
                }
            }

            function editLocation(locationId) {
                fetch(`/admin/location/${locationId}`, {
                    method: 'GET'
                })
                .then(response => response.json())
                .then(location => {
                    const form = document.getElementById('addLocationForm');
                    if (form) {
                        document.getElementById('locationName').value = location.name;
                        document.getElementById('locationCountry').value = location.country;
                        document.getElementById('locationLatitude').value = location.latitude;
                        document.getElementById('locationLongitude').value = location.longitude;
                        document.getElementById('locationDonationAmount').value = location.donationAmount;
                        document.getElementById('locationYoutubeUrl').value = location.youtubeEmbedUrl || '';
                        
                        let hiddenInput = document.getElementById('locationId');
                        if (!hiddenInput) {
                            hiddenInput = document.createElement('input');
                            hiddenInput.type = 'hidden';
                            hiddenInput.id = 'locationId';
                            form.appendChild(hiddenInput);
                        }
                        hiddenInput.value = location.id;
                        
                        document.getElementById('addLocationModalLabel').textContent = 'Edit Location';
                        
                        const modal = new bootstrap.Modal(document.getElementById('addLocationModal'));
                        modal.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading location details');
                });
            }

            function deleteLocation(locationId) {
                if (confirm('Are you sure you want to delete this location?')) {
                    fetch(`/admin/location/${locationId}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Location deleted successfully!');
                            window.location.reload();
                        } else {
                            alert('Error: ' + (data.error || 'Unknown error occurred'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error deleting location');
                    });
                }
            }
            function editAssociation(associationId) {
                fetch(`/admin/association/${associationId}`, {
                    method: 'GET'
                })
                .then(response => response.json())
                .then(association => {
                    const form = document.getElementById('addAssociationForm');
                    if (form) {
                        document.getElementById('associationName').value = association.name;
                        document.getElementById('associationDescription').value = association.description;
                        
                        const logoInput = document.getElementById('associationLogo');
                        logoInput.removeAttribute('required');
                        
                        const currentLogoContainer = document.getElementById('currentLogoContainer');
                        if (!currentLogoContainer && association.logo) {
                            const container = document.createElement('div');
                            container.id = 'currentLogoContainer';
                            container.className = 'mb-3';
                            container.innerHTML = `
                                <label class="form-label">Current Logo</label>
                                <div>
                                    <img src="/uploads/associations/${association.logo}" 
                                        alt="Current association logo" 
                                        style="max-width: 200px; max-height: 200px; object-fit: cover;">
                                </div>
                            `;
                            logoInput.parentNode.insertBefore(container, logoInput);
                        } else if (currentLogoContainer && association.logo) {
                            currentLogoContainer.querySelector('img').src = `/uploads/associations/${association.logo}`;
                        }
                        
                        let hiddenInput = document.getElementById('associationId');
                        if (!hiddenInput) {
                            hiddenInput = document.createElement('input');
                            hiddenInput.type = 'hidden';
                            hiddenInput.id = 'associationId';
                            form.appendChild(hiddenInput);
                        }
                        hiddenInput.value = association.id;
                        
                        document.getElementById('addAssociationModalLabel').textContent = 'Edit Association';
                        
                        
                        const modal = new bootstrap.Modal(document.getElementById('addAssociationModal'));
                        modal.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading association details');
                });
            }

            function deleteAssociation(associationId) {
                if (confirm('Are you sure you want to delete this association?')) {
                    fetch(`/admin/association/${associationId}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Association deleted successfully!');
                            window.location.reload();
                        } else {
                            alert('Error: ' + (data.error || 'Unknown error occurred'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error deleting association');
                    });
                }
            }

            function showError(message) {
                alert(message);
                console.error(message);
            }

                    // Search Event and location 
            document.addEventListener('DOMContentLoaded', function() {
                // Events Search
            (function setupEventSearch() {
                const searchInput = document.getElementById('searchInput');
                const eventTableBody = document.querySelector('.tables-wrapper table tbody');
                let eventSearchTimeout;

                console.log('Search input:', searchInput);
                console.log('Table body:', eventTableBody); 

                if (searchInput && eventTableBody) {
                    searchInput.addEventListener('input', function() {
                        const searchTerm = this.value;
                        console.log('Search term:', searchTerm); 
                        
                        clearTimeout(eventSearchTimeout);
                        eventSearchTimeout = setTimeout(() => {
                            fetchEventSearchResults(searchTerm);
                        }, 300);
                    });
                } else {
                    console.error('Could not find search input or table body');
                }

                function fetchEventSearchResults(term) {
                    console.log('Fetching results for:', term);
                    fetch(`/admin/events/search?term=${encodeURIComponent(term)}`)
                        .then(response => {
                            console.log('Raw response:', response); 
                            return response.json();
                        })
                        .then(data => {
                            console.log('Received data:', data); 
                            if (data.success) {
                                updateEventTable(data.events);
                            } else {
                                console.error('Search error:', data.error);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error searching events');
                        });
                }

                    function updateEventTable(events) {
                        if (!eventTableBody) return;
                        eventTableBody.innerHTML = events.map(event => `
                            <tr>
                                <td class="min-width">
                                    <div class="event-image">
                                        <img src="/uploads/events/${event.imageFilename}" 
                                            alt="${event.name}" 
                                            style="width: 50px; height: 50px; object-fit: cover;" />
                                    </div>
                                </td>
                                <td class="min-width"><p>${event.name}</p></td>
                                <td class="min-width"><p>${event.association}</p></td>
                                <td class="min-width"><p>${event.eventDate}</p></td>
                                <td class="min-width"><p>$${event.price}</p></td>
                                <td class="min-width"><p>${event.location.name}</p></td>
                                <td class="min-width">
                                    <span class="status-btn ${getTypeClass(event.type)}">${event.type}</span>
                                </td>
                                <td>
                                    <div class="action">
                                        <button class="text-primary me-2" onclick="editEvent(${event.id})">
                                            <i class="lni lni-pencil"></i>
                                        </button>
                                        <button class="text-danger" onclick="deleteEvent(${event.id})">
                                            <i class="lni lni-trash-can"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `).join('');
                    }
                })();

                // Locations Search 
                (function setupLocationSearch() {
                    const searchLocationInput = document.getElementById('searchLocationInput');
                    const locationTable = Array.from(document.querySelectorAll('.tables-wrapper')).find(el => 
                        el.querySelector('h6.mb-10')?.textContent.includes('Locations Table')
                    );
                    const locationTableBody = locationTable ? locationTable.querySelector('table tbody') : null;
                    let locationSearchTimeout;

                    if (searchLocationInput && locationTableBody) {
                        searchLocationInput.addEventListener('input', function() {
                            clearTimeout(locationSearchTimeout);
                            locationSearchTimeout = setTimeout(() => {
                                const searchTerm = this.value;
                                fetchLocationSearchResults(searchTerm);
                            }, 300);
                        });
                    }

                    function fetchLocationSearchResults(term) {
                        fetch(`/admin/locations/search?term=${encodeURIComponent(term)}`)
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    updateLocationsTable(data.locations);
                                } else {
                                    console.error('Search error:', data.error);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('Error searching locations');
                            });
                    }

                    function updateLocationsTable(locations) {
                        if (!locationTableBody) return;
                        locationTableBody.innerHTML = locations.map(location => `
                            <tr>
                                <td class="min-width"><p>${location.name}</p></td>
                                <td class="min-width"><p>${location.country}</p></td>
                                <td class="min-width"><p>${location.latitude}, ${location.longitude}</p></td>
                                <td class="min-width"><p>$${location.donationAmount}</p></td>
                                <td>
                                    <div class="action">
                                        <button class="text-primary me-2" onclick="editLocation(${location.id})">
                                            <i class="lni lni-pencil"></i>
                                        </button>
                                        <button class="text-danger" onclick="deleteLocation(${location.id})">
                                            <i class="lni lni-trash-can"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `).join('');
                    }
                })();

                // Association Search 
                (function setupAssociationSearch() {
                    const searchAssociationInput = document.getElementById('searchAssociationInput');
                    const associationTable = Array.from(document.querySelectorAll('.tables-wrapper')).find(el => 
                        el.querySelector('h6.mb-10')?.textContent.includes('Associations Table')
                    );
                    const associationTableBody = associationTable ? associationTable.querySelector('table tbody') : null;
                    let associationSearchTimeout;

                    if (searchAssociationInput && associationTableBody) {
                        searchAssociationInput.addEventListener('input', function() {
                            clearTimeout(associationSearchTimeout);
                            associationSearchTimeout = setTimeout(() => {
                                const searchTerm = this.value;
                                fetchAssociationSearchResults(searchTerm);
                            }, 300);
                        });
                    }

                    function fetchAssociationSearchResults(term) {
                        fetch(`/admin/associations/search?term=${encodeURIComponent(term)}`)
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    updateAssociationsTable(data.associations);
                                } else {
                                    console.error('Search error:', data.error);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('Error searching associations');
                            });
                    }

                    function updateAssociationsTable(associations) {
                        if (!associationTableBody) return;
                        associationTableBody.innerHTML = associations.map(association => `
                            <tr>
                                <td class="min-width">
                                    <div class="association-image">
                                        ${association.logo 
                                            ? `<img src="/uploads/associations/${association.logo}" 
                                                alt="${association.name}" 
                                                style="width: 50px; height: 50px; object-fit: cover;" />`
                                            : `<div class="no-image" style="width: 50px; height: 50px; background: #eee; display: flex; align-items: center; justify-content: center;">
                                                <i class="lni lni-image"></i>
                                            </div>`
                                        }
                                    </div>
                                </td>
                                <td class="min-width">
                                    <p>${association.name}</p>
                                </td>
                                <td class="min-width">
                                    <p>${association.description || ''}</p>
                                </td>
                                <td>
                                    <div class="action">
                                        <button class="text-primary me-2" onclick="editAssociation(${association.id})">
                                            <i class="lni lni-pencil"></i>
                                        </button>
                                        <button class="text-danger" onclick="deleteAssociation(${association.id})">
                                            <i class="lni lni-trash-can"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `).join('');
                    }
                })();

                function getTypeClass(type) {
                    const typeClasses = {
                        'water': 'info-btn',
                        'education': 'warning-btn',
                        'blood': 'danger-btn',
                        'homes': 'success-btn',
                        'ramadan': 'purple-btn',
                        'hospital': 'primary-btn'
                    };
                    return typeClasses[type] || 'primary-btn';
                }
            });

            document.addEventListener('DOMContentLoaded', function() {
            var profileDropdown = document.getElementById('profile');
            if (profileDropdown) {
                profileDropdown.addEventListener('click', function(e) {
                    e.preventDefault();
                    var dropdown = new bootstrap.Dropdown(profileDropdown);
                    dropdown.toggle();
                });
            }
        });
        // Menu toggle functionality
            document.addEventListener('DOMContentLoaded', function() {
                const menuToggle = document.getElementById('menu-toggle');
                const sidebar = document.querySelector('.sidebar-nav-wrapper');
                const overlay = document.querySelector('.overlay');
                const mainWrapper = document.querySelector('.main-wrapper');

                function toggleMenu() {
                    sidebar.classList.toggle('collapsed');
                    overlay.classList.toggle('active');
                    mainWrapper.classList.toggle('active');
                }

                if (menuToggle) {
                    menuToggle.addEventListener('click', toggleMenu);
                }

                if (overlay) {
                    overlay.addEventListener('click', toggleMenu);
                }

                // Close sidebar when clicking outside
                document.addEventListener('click', function(event) {
                    if (!sidebar.contains(event.target) && !menuToggle.contains(event.target) && !sidebar.classList.contains('collapsed')) {
                        toggleMenu();
                    }
                });

                // Dropdown functionality
                var dropdownElementList = [].slice.call(document.querySelectorAll('[data-bs-toggle="dropdown"]'))
                var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
                    return new bootstrap.Dropdown(dropdownToggleEl)
                });
            });
            
            document.addEventListener('DOMContentLoaded', function() {
                // Menu toggle functionality
                const menuToggle = document.getElementById('menu-toggle');
                const sidebar = document.querySelector('.sidebar-nav-wrapper');
                const overlay = document.querySelector('.overlay');
                const mainWrapper = document.querySelector('.main-wrapper');

                if (menuToggle && sidebar && overlay && mainWrapper) {
                    function toggleMenu(e) {
                        e.preventDefault();
                        sidebar.classList.toggle('collapsed');
                        overlay.classList.toggle('active');
                        mainWrapper.classList.toggle('active');
                    }

                    menuToggle.addEventListener('click', toggleMenu);
                    overlay.addEventListener('click', toggleMenu);
                }

                // Initialize all dropdowns
                const dropdowns = document.querySelectorAll('.dropdown-toggle');
                dropdowns.forEach(dropdown => {
                    new bootstrap.Dropdown(dropdown);
                });
            });

            
        </script>
    
        
    
{% endblock %}